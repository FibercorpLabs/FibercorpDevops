# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2017 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Reportable(Mo):
    """
    A statistics policy container, which contains statistic collections and export policies for different types of statistics.

    """

    meta = ClassMeta("cobra.model.stats.Reportable")

    meta.moClassName = "statsReportable"
    meta.rnFormat = "stat-%(scope)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Statistics Policy"
    meta.writeAccessMask = 0x800000000000001
    meta.readAccessMask = 0x800000000000001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.stats.ExportP")
    meta.childClasses.add("cobra.model.stats.Coll")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.Coll", "coll-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.stats.ExportP", "exp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.mon.FabricTarget")
    meta.parentClasses.add("cobra.model.mon.EPGTarget")
    meta.parentClasses.add("cobra.model.mon.InfraTarget")

    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Comp")

    meta.rnPrefixes = [
        ('stat-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 13772, PropCategory.REGULAR)
    prop.label = "Monitoring policy attached to this observable object"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Name alias"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 118, PropCategory.REGULAR)
    prop.label = "Reportable Scope"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("compTrnsmtdPkts", "transmitted-packets", 1204)
    prop._addConstant("l2IngrPkts", "ingress-packets", 3439)
    prop._addConstant("eqptcapacityWideTcamPrefixEntries", "wide-tcam-prefix-i-pv6-entries", 11276)
    prop._addConstant("fvFltCounter", "fault-counter", 9915)
    prop._addConstant("l2EgrPktsPart", "part-of-egress-packets", 7330)
    prop._addConstant("coppDrop", "copp-drop-counters", 5677)
    prop._addConstant("acllogFlowCounterAg", "aggregated-flow-record-counter", 8628)
    prop._addConstant("qosmIngrPkts", "ingress-packets", 2353)
    prop._addConstant("analyticsExport", "netflow-export-counters", 9426)
    prop._addConstant("eqptTemp", "temperature", 3256)
    prop._addConstant("compRcvdBytes", "received-bytes", 1186)
    prop._addConstant("commWebConnStates", "web-connections-state", 6553)
    prop._addConstant("coppLldpDrop", "per-interface-drop-counters-for-lldp", 10333)
    prop._addConstant("coppArpDrop", "per-interface-drop-counters-for-arp", 10189)
    prop._addConstant("actrlRuleHitPart", "part-of-rule-hits", 2410)
    prop._addConstant("procProcMem", "process-memory", 3896)
    prop._addConstant("procSysLoad", "system-load", 3820)
    prop._addConstant("procCPU", "cpu-utilization", 3917)
    prop._addConstant("actrlRuleHit", "rule-hits", 2408)
    prop._addConstant("latencyLatencyHist7", "delay(histogram-mode-7)", 9733)
    prop._addConstant("coppBfdDrop", "per-interface-drop-counters-for-bfd", 10477)
    prop._addConstant("latencyLatencyHist6", "delay(histogram-mode-6)", 9715)
    prop._addConstant("eqptcapacityPolUsage", "policy-entries-usage", 6707)
    prop._addConstant("fabricNodeHealth", "node-health", 462)
    prop._addConstant("dppEgrDrop", "egress-data-plane-policer-drop-counters", 8129)
    prop._addConstant("infraClusterStats", "cluster", 4469)
    prop._addConstant("latencyLatencyHist2", "delay(histogram-mode-2)", 9643)
    prop._addConstant("l2IngrPktsAg", "aggregated-ingress-packets", 3443)
    prop._addConstant("isisTreeCalcStats", "ftag-global", 2769)
    prop._addConstant("eqptcapacityL2Entry", "layer2-entry", 2889)
    prop._addConstant("eqptcapacityVlanXlateEntries", "vlan-xlate-entries", 7052)
    prop._addConstant("opflexIDEpDfwConnDenied", "dfw-connection-denied-statistics", 6408)
    prop._addConstant("eqptcapacityPrefixEntries", "prefix-(i-pv4-and-i-pv6)-entries", 6626)
    prop._addConstant("l2IngrBytesAg", "aggregated-ingress-bytes", 3498)
    prop._addConstant("procApplicationCPU", "application-cpu-utilization", 9947)
    prop._addConstant("fabricAcTxRx", "packets", 404)
    prop._addConstant("coppFilterStats", "filter-match-counters", 10495)
    prop._addConstant("eqptcapacityL2Usage", "layer2-entries-usage-count", 6689)
    prop._addConstant("eqptIngrStorm", "ingress-storm-ctrl", 5937)
    prop._addConstant("compRcvdErrPkts", "received-error-packets", 1168)
    prop._addConstant("eqptEgrTotal", "egress", 3181)
    prop._addConstant("coppOspfDrop", "per-interface-drop-counters-for-ospf", 10225)
    prop._addConstant("acllogFlowCounter", "flow-record-counter", 8610)
    prop._addConstant("eqptcapacityMcastUsage", "multicast-entries-usage", 6671)
    prop._addConstant("eqptcapacityL3Usage", "layer3-entries-usage-count", 6725)
    prop._addConstant("opflexIDEpRxPkts", "received-packets", 1026)
    prop._addConstant("compRcvdPkts", "received-packets", 1150)
    prop._addConstant("l2IngrPktsPart", "part-of-ingress-packets", 3441)
    prop._addConstant("fabricAcDropExcess", "drop-packets", 423)
    prop._addConstant("procApplicationMemory", "application-memory-uitlization", 9965)
    prop._addConstant("eqptEgrAggrPkts", "egress-aggregated-packets", 8858)
    prop._addConstant("dppIngrAllow", "ingress-data-plane-policer-allow-counters", 8075)
    prop._addConstant("eqptIngrDropPkts", "ingress-drop-packets", 3086)
    prop._addConstant("coppCdpAllow", "per-interface-allow-counters-for-cdp", 10279)
    prop._addConstant("qosmEgrPkts", "egress-packets", 2372)
    prop._addConstant("eqptIngrUnkBytes", "ingress-unknown-bytes", 3067)
    prop._addConstant("fvOverallHealth", "overall-tenant-health", 2009)
    prop._addConstant("commWebReqAg", "aggregated-web-requests", 6449)
    prop._addConstant("coppPermit", "filter-counters", 10793)
    prop._addConstant("procSysCPU", "system-cpu", 3839)
    prop._addConstant("infraReplicaStats", "replica", 4490)
    prop._addConstant("l2EgrPkts", "egress-packets", 7328)
    prop._addConstant("procSysMem", "system-memory", 3858)
    prop._addConstant("vnsTxPkts", "tx-packet-counters", 1543)
    prop._addConstant("coppLacpDrop", "per-interface-drop-counters-for-lacp", 10369)
    prop._addConstant("procMem", "memory", 3936)
    prop._addConstant("l2IngrBytes", "ingress-bytes", 3494)
    prop._addConstant("opflexIDEpTxBytes", "transmitted-bytes", 1083)
    prop._addConstant("opflexIDEpTxPkts", "transmitted-packets", 1064)
    prop._addConstant("eqptIngrAggrBytes", "ingress-aggregated-bytes", 8840)
    prop._addConstant("coppBgpAllow", "per-interface-allow-counters-for-bgp", 10387)
    prop._addConstant("dppIfCktDrop", "if-ckt-ingress-data-plane-policer-drop-counters", 10593)
    prop._addConstant("dppIfCktAllowPart", "part-of-if-ckt-ingress-data-plane-policer-allow-counters", 10854)
    prop._addConstant("coppAllow", "copp-allow-counters", 5659)
    prop._addConstant("eqptEgrAggrBytes", "egress-aggregated-bytes", 8876)
    prop._addConstant("opflexIDEpPolicyDrop", "epg-policy-drop-statistics", 8044)
    prop._addConstant("eqptcapacityMcastEntry", "multicast-entry", 2947)
    prop._addConstant("eqptIngrStormBc", "ingress-storm-ctrl-broadcast", 10044)
    prop._addConstant("coppLldpAllow", "per-interface-allow-counters-for-lldp", 10315)
    prop._addConstant("eqptcapacityVlanUsage", "vlan-entries-usage", 6743)
    prop._addConstant("dppIfCktAllow", "if-ckt-ingress-data-plane-policer-allow-counters", 10575)
    prop._addConstant("unspecified", None, 0)
    prop._addConstant("coppArpAllow", "per-interface-allow-counters-for-arp", 10171)
    prop._addConstant("actrlRuleHitAg", "aggregated-rule-hits", 2412)
    prop._addConstant("eqptcapacityL3UsageCap", "layer3-entries-max-capacity", 6907)
    prop._addConstant("isisFtagTreeStats", "ftag", 2807)
    prop._addConstant("eqptPsPower", "power-supply", 3299)
    prop._addConstant("eqptIngrBytes", "ingress-bytes", 3048)
    prop._addConstant("l2EgrPktsAg", "aggregated-egress-packets", 7332)
    prop._addConstant("coppBfdAllow", "per-interface-allow-counters-for-bfd", 10459)
    prop._addConstant("eqptFruPower", "fru-power", 3280)
    prop._addConstant("eqptcapacityBDEntry", "bridge-domain-entry", 2870)
    prop._addConstant("opflexIDEpDfwConn", "dfw-connection-statistics", 6390)
    prop._addConstant("coppStpDrop", "per-interface-drop-counters-for-stp", 10441)
    prop._addConstant("dppEgrAllow", "egress-data-plane-policer-allow-counters", 8111)
    prop._addConstant("coppDropped", "copp-dropped-counters", 10811)
    prop._addConstant("commWebReq", "web-requests", 6445)
    prop._addConstant("coppIcmpAllow", "per-interface-allow-counters-for-icmp", 10243)
    prop._addConstant("coppLacpAllow", "per-interface-allow-counters-for-lacp", 10351)
    prop._addConstant("eqptIngrUnkPkts", "ingress-unknown-packets", 3029)
    prop._addConstant("dppIfCktDropPart", "part-of-if-ckt-ingress-data-plane-policer-drop-counters", 10890)
    prop._addConstant("latencyLatencyAvg2", "delay(average-mode-2)", 9607)
    prop._addConstant("isisTreeCalcNodeStats", "ftag-global-node", 2788)
    prop._addConstant("analyticsDropped", "netflow-drop-counters", 9444)
    prop._addConstant("opflexIDEpDfwPktDrop", "dfw-packet-drop-statistics", 6426)
    prop._addConstant("dppIngrDrop", "ingress-data-plane-policer-drop-counters", 8093)
    prop._addConstant("eqptcapacityL3Entry", "layer3-entry", 2909)
    prop._addConstant("eqptcapacityPolEntry", "policy-entry", 2928)
    prop._addConstant("eqptEgrPkts", "egress-packets", 3105)
    prop._addConstant("eqptEgrDropPkts", "egress-drop-packets", 3143)
    prop._addConstant("eqptIngrPkts", "ingress-packets", 3010)
    prop._addConstant("l2IngrBytesPart", "part-of-ingress-bytes", 3496)
    prop._addConstant("eqptEgrBytes", "egress-bytes", 3124)
    prop._addConstant("fabricOverallHealth", "overall-fabric-health", 444)
    prop._addConstant("compTrnsmtdBytes", "transmitted-bytes", 1240)
    prop._addConstant("commWebConnAg", "aggregated-web-connections", 6503)
    prop._addConstant("vnsRxPkts", "rx-packet-counters", 1509)
    prop._addConstant("coppIcmpDrop", "per-interface-drop-counters-for-icmp", 10261)
    prop._addConstant("eqptIngrAggrPkts", "ingress-aggregated-packets", 8822)
    prop._addConstant("eqptcapacityL3UsagePer", "layer3-entries-usage-percentage", 9156)
    prop._addConstant("latencyLatencyHist9", "delay(histogram-mode-9)", 9769)
    prop._addConstant("latencyLatencyHist8", "delay(histogram-mode-8)", 9751)
    prop._addConstant("l2EgrBytesPart", "part-of-egress-bytes", 7384)
    prop._addConstant("coppCdpDrop", "per-interface-drop-counters-for-cdp", 10297)
    prop._addConstant("latencyLatencyHist5", "delay(histogram-mode-5)", 9697)
    prop._addConstant("latencyLatencyHist4", "delay(histogram-mode-4)", 9679)
    prop._addConstant("latencyLatencyHist3", "delay(histogram-mode-3)", 9661)
    prop._addConstant("eqptFanStats", "fan", 3318)
    prop._addConstant("latencyLatencyHist1", "delay(histogram-mode-1)", 9625)
    prop._addConstant("commWebConnStatesAg", "aggregated-web-connections-state", 6557)
    prop._addConstant("dppIfCktDropAg", "aggregated-if-ckt-ingress-data-plane-policer-drop-counters", 10908)
    prop._addConstant("dppIfCktAllowAg", "aggregated-if-ckt-ingress-data-plane-policer-allow-counters", 10872)
    prop._addConstant("coppOspfAllow", "per-interface-allow-counters-for-ospf", 10207)
    prop._addConstant("procProcCPU", "process-cpu", 3877)
    prop._addConstant("opflexIDEpRxBytes", "received-bytes", 1045)
    prop._addConstant("compHostStats", "host", 1132)
    prop._addConstant("commWebConn", "web-connections", 6499)
    prop._addConstant("coppStpAllow", "per-interface-allow-counters-for-stp", 10423)
    prop._addConstant("eqptIngrStormUc", "ingress-storm-ctrl-unicast", 10026)
    prop._addConstant("latencyLatencyAvg1", "delay(average-mode-1)", 9589)
    prop._addConstant("eqptIngrStormMc", "ingress-storm-ctrl-multicast", 10062)
    prop._addConstant("l2EgrBytesAg", "aggregated-egress-bytes", 7386)
    prop._addConstant("eqptIngrTotal", "ingress", 3162)
    prop._addConstant("opflexIDEpBcastPkts", "broadcast-packets", 5362)
    prop._addConstant("coppBgpDrop", "per-interface-drop-counters-for-bgp", 10405)
    prop._addConstant("compTrnsmtdErrPkts", "transmitted-error-packets", 1222)
    prop._addConstant("eqptcapacityRouterIpEntries", "router-ip-(i-pv4-and-i-pv6)-entries", 6761)
    prop._addConstant("l2EgrBytes", "egress-bytes", 7382)
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    meta.namingProps.append(getattr(meta.props, "scope"))

    def __init__(self, parentMoOrDn, scope, markDirty=True, **creationProps):
        namingVals = [scope]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
