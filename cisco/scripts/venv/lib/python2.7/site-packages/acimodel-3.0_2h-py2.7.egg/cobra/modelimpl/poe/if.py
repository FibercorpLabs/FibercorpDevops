# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2017 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.poe.If")

    meta.moClassName = "poeIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Interface"
    meta.writeAccessMask = 0x6006010020001
    meta.readAccessMask = 0x6006010020001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.l2.RsEthIf")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsEthIf", "rsethIf"))

    meta.parentClasses.add("cobra.model.poe.Inst")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.l2.ProtIf")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.nw.Item")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.Ep")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "consumption", "consumption", 32670, PropCategory.REGULAR)
    prop.label = "Consumption"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(4000, 30000)]
    prop.defaultValue = 4000
    prop.defaultValueStr = "4000"
    meta.props.add("consumption", prop)

    prop = PropMeta("str", "cutoffPower", "cutoffPower", 32675, PropCategory.REGULAR)
    prop.label = "Cutoff Power"
    prop.isOper = True
    prop.range = [(4000, 30000)]
    meta.props.add("cutoffPower", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "devClass", "devClass", 32678, PropCategory.REGULAR)
    prop.label = "Device Class"
    prop.isOper = True
    prop.range = [(0, 4)]
    meta.props.add("devClass", prop)

    prop = PropMeta("str", "devName", "devName", 32677, PropCategory.REGULAR)
    prop.label = "Device Name"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("devName", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "id", "id", 32682, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "max", "max", 32669, PropCategory.REGULAR)
    prop.label = "Maximum Power"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(4000, 30000)]
    prop.defaultValue = 4000
    prop.defaultValueStr = "4000"
    meta.props.add("max", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 32668, PropCategory.REGULAR)
    prop.label = "PoE Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "auto"
    prop._addConstant("auto", "auto", 2)
    prop._addConstant("never", "never", 1)
    prop._addConstant("static", "static", 3)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 32673, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop._addConstant("err-dis", "error-disable", 2)
    prop._addConstant("fault", "fault", 3)
    prop._addConstant("off", "no-power-applied", 0)
    prop._addConstant("on", "power-applied", 1)
    prop._addConstant("power-deny", "power-deny", 4)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "policeAct", "policeAct", 32672, PropCategory.REGULAR)
    prop.label = "Policing Action"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "err-dis"
    prop._addConstant("err-dis", "error-disable", 1)
    prop._addConstant("log", "log", 2)
    prop._addConstant("none", "none", 0)
    meta.props.add("policeAct", prop)

    prop = PropMeta("str", "policeSt", "policeSt", 32676, PropCategory.REGULAR)
    prop.label = "Police State"
    prop.isOper = True
    prop._addConstant("err-dis", "error-disable", 1)
    prop._addConstant("log", "log", 2)
    prop._addConstant("na", "not-available", 0)
    prop._addConstant("ok", "ok", 3)
    meta.props.add("policeSt", prop)

    prop = PropMeta("str", "prioHigh", "prioHigh", 32671, PropCategory.REGULAR)
    prop.label = "Port Priority High"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", None, False)
    prop._addConstant("yes", None, True)
    meta.props.add("prioHigh", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "used", "used", 32674, PropCategory.REGULAR)
    prop.label = "Usage"
    prop.isOper = True
    prop.range = [(4000, 30000)]
    meta.props.add("used", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
